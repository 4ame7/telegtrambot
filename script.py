from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
import logging
import datetime

# ======= –ù–ê–°–¢–†–û–ô–ö–ò =========
BOT_TOKEN = "7739338057:AAHFzDpOgh-XrBr-vqWvV5TEqKs62HQS9zY"
CHANNEL_ID = -1002496521038
CHANNEL_LINK = "https://t.me/num_insight"
ADMIN_ID = 405069873

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ======= Conversation states =======
ASK_BIRTHDATE = 0
SHOWING_KEYS = 1

# ======= –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π =========
CONSCIOUSNESS_ENERGY_TEXTS = {i: f"–≠–Ω–µ—Ä–≥–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–æ–º–µ—Ä {i}: —Ç—ã —É–Ω–∏–∫–∞–ª–µ–Ω!" for i in range(1, 23)}
MATERIAL_ENERGY_TEXTS = {i: f"–≠–Ω–µ—Ä–≥–∏—è –º–∞—Ç–µ—Ä–∏–∏ –Ω–æ–º–µ—Ä {i}: —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Å–∏–ª–∞." for i in range(1, 10)}
SOUL_ENERGY_TEXTS = {i: f"–≠–Ω–µ—Ä–≥–∏—è –¥—É—à–∏ –¥–ª—è –º–µ—Å—è—Ü–∞ {i}: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π." for i in range(1, 13)}

# ======= –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç =========
ADDITIONAL_INFO_TEXT = (
    "–ö–∞–∫ —Ç–µ–±–µ —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è? –ë—ã–ª–∞ –ª–∏ –æ–Ω–∞ –ø–æ–ª–µ–∑–Ω–æ–π?\n\n"
    "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–π –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–µ, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–æ–π —Ç–≥-–∫–∞–Ω–∞–ª."
)

# ======= URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –∫–ª—é—á–µ–π =========
KEY_IMAGE_URL = "https://i.pinimg.com/736x/a0/a9/70/a0a970e2ab1807b52dd46b3261549509.jpg"

# ======= –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ä—Ç–∞ =========
START_KEYBOARD = ReplyKeyboardMarkup(
    [[KeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# ======= –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =========
def get_subscription_markup():
    keyboard = [
        [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)],
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue"),
            InlineKeyboardButton("üö™ –£–π—Ç–∏", callback_data="exit")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_main_menu_markup():
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("üìÖ –†–∞—Å—Å—á–µ—Ç –ø–æ –¥–Ω—é —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="birthday_calc")],
        [InlineKeyboardButton("üö™ –£–π—Ç–∏", callback_data="exit")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_next_key_markup():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next_key")]])

def get_final_menu_markup():
    keyboard = [
        [InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="menu")],
        [InlineKeyboardButton("üö™ –£–π—Ç–∏", callback_data="exit")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ======= –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===========
async def check_subscription(user_id, context: ContextTypes.DEFAULT_TYPE):
    try:
        member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# ======= –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ===========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        reply_markup=START_KEYBOARD
    )

# ======= –ü–∞–Ω–µ–ª—å –ø–æ–¥–ø–∏—Å–∫–∏ ===========
async def send_subscription_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.</b>\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )
    if update.message:
        await update.message.reply_html(text, reply_markup=get_subscription_markup())
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(text, reply_markup=get_subscription_markup(), parse_mode="HTML")
        except:
            pass

# ======= –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===========
async def send_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ."
    if update.message:
        await update.message.reply_text(text, reply_markup=get_main_menu_markup())
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(text, reply_markup=get_main_menu_markup())
        except:
            await update.callback_query.message.delete()
            await update.callback_query.message.chat.send_message(text, reply_markup=get_main_menu_markup())

# ======= –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===========
async def send_additional_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.effective_chat.send_message(ADDITIONAL_INFO_TEXT, reply_markup=reply_markup)

# ======= –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ ===========
async def continue_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    if await check_subscription(user.id, context):
        await send_main_menu(update, context)
    else:
        await send_subscription_panel(update, context)

# ======= –ö–Ω–æ–ø–∫–∞ "–£–π—Ç–∏" ===========
async def exit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await send_additional_info(update, context)
    try:
        await query.message.delete()
    except:
        pass

# ======= –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===========
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "help":
        await query.edit_message_text("‚ÑπÔ∏è –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    elif data == "birthday_calc":
        intro_text = (
            "–¢—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ç–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ?\n\n"
            "–≠—Ç–æ –ª–∏—á–Ω—ã–π –∫–æ–¥ –í—Å–µ–ª–µ–Ω–Ω–æ–π, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:\n"
            "‚úî –¢–≤–æ–∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã ‚Äî —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ª–µ–≥–∫–æ, –∞ —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å.\n"
            "‚úî –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî –ø–æ—á–µ–º—É –æ–¥–Ω–∏ –ª—é–¥–∏ –ø—Ä–∏—Ç—è–≥–∏–≤–∞—é—Ç –¥–µ–Ω—å–≥–∏, –∞ –¥—Ä—É–≥–∏–º –æ–Ω–∏ ¬´—É—Ç–µ–∫–∞—é—Ç¬ª.\n"
            "‚úî –ö–∞–Ω–∞–ª –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è ‚Äî –æ—Ç–∫—É–¥–∞ –∫ —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –∏ –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–≤—è–∑—å —Å–æ —Å–≤–æ–∏–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º.\n\n"
            "–°–µ–π—á–∞—Å —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å¬†**3 –≥–ª–∞–≤–Ω—ã—Ö –∫–ª—é—á–∞**¬†–∏–∑ —Ç–≤–æ–µ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
            "üìÖ –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *26.08.1996*"
        )
        await query.edit_message_text(intro_text, parse_mode="Markdown")
        return ASK_BIRTHDATE
    elif data == "menu":
        await send_main_menu(update, context)
    elif data == "exit":
        await exit_callback(update, context)

# ======= –†–∞—Å—á—ë—Ç –∫–ª—é—á–µ–π ===========
def reduce_to_limit(number: int, limit: int) -> int:
    while number > limit:
        number = sum(int(d) for d in str(number))
    return number

def reduce_to_single_digit(number: int) -> int:
    while number > 9:
        number = sum(int(d) for d in str(number))
    return number

def calculate_energies(day: int, month: int, year: int):
    consciousness = reduce_to_limit(day, 22)
    material = reduce_to_single_digit(year)
    soul = month
    return consciousness, material, soul

# ======= –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª—é—á–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π ===========
async def send_key_with_image(chat, key_title, key_number, key_text):
    try:
        await chat.send_photo(
            photo=KEY_IMAGE_URL,
            caption=f"{key_title} ({key_number}):\n{key_text}",
            reply_markup=get_next_key_markup()
        )
    except:
        await chat.send_message(f"{key_title} ({key_number}):\n{key_text}", reply_markup=get_next_key_markup())

# ======= –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ===========
async def birthday_calc_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        birthdate = datetime.datetime.strptime(text, "%d.%m.%Y")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.MM.–ì–ì–ì–ì.")
        return ASK_BIRTHDATE

    day, month, year = birthdate.day, birthdate.month, birthdate.year
    consciousness, material, soul = calculate_energies(day, month, year)

    context.user_data['keys'] = [
        ("üî¢ –≠–Ω–µ—Ä–≥–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è", consciousness, CONSCIOUSNESS_ENERGY_TEXTS[consciousness]),
        ("üèãÔ∏è‚Äç‚ôÇÔ∏è –≠–Ω–µ—Ä–≥–∏—è –º–∞—Ç–µ—Ä–∏–∏", material, MATERIAL_ENERGY_TEXTS[material]),
        ("üïäÔ∏è –≠–Ω–µ—Ä–≥–∏—è –¥—É—à–∏", soul, SOUL_ENERGY_TEXTS[soul])
    ]
    context.user_data['current_key_index'] = 0

    key_title, key_number, key_text = context.user_data['keys'][0]
    await send_key_with_image(update.message.chat, key_title, key_number, key_text)
    return SHOWING_KEYS

# ======= –ü–æ—à–∞–≥–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–π ===========
async def next_key_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    idx = context.user_data.get('current_key_index', 0) + 1
    keys = context.user_data.get('keys', [])

    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except:
        pass

    if idx < len(keys):
        key_title, key_number, key_text = keys[idx]
        context.user_data['current_key_index'] = idx
        await send_key_with_image(query.message.chat, key_title, key_number, key_text)
        return SHOWING_KEYS
    else:
        await query.message.chat.send_message(
            "‚úÖ –≠—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —Ç–≤–æ–µ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.",
            reply_markup=get_final_menu_markup()
        )
        return ConversationHandler.END

# ======= /help ===========
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª.\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {CHANNEL_LINK}"
    )
    await update.message.reply_html(text)

# ======= /cancel ===========
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# ======= –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===========
async def default_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        user = update.effective_user
        if await check_subscription(user.id, context):
            await send_main_menu(update, context)
        else:
            await send_subscription_panel(update, context)
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'.",
            reply_markup=START_KEYBOARD
        )

# ======= –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===========
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^birthday_calc$")],
        states={
            ASK_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthday_calc_receive)],
            SHOWING_KEYS: [CallbackQueryHandler(next_key_handler, pattern="^next_key$")]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(continue_callback, pattern="^continue$"))
    app.add_handler(CallbackQueryHandler(exit_callback, pattern="^exit$"))
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^(help|menu)$"))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, default_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
